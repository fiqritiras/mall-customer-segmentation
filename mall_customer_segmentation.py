# -*- coding: utf-8 -*-
"""Customer Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cNilbvT-lJRQZ071cERsIXIJw54lVXH0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

#Load customer data
data = pd.read_csv("/content/Shopping Mall Customer Segmentation Data .csv")
data.head()

#Drop customer ID and gender
data1 = data.drop(columns=['Customer ID','Gender'])

#Converts categorical variables to dummy variables
data2 = pd.get_dummies(data1, drop_first=True)
data2.head()

# Check for missing values
print(data2.isnull().sum())

# Standardize the data
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data2)

# Convert scaled data back to a DataFrame for clarity
scaled_df = pd.DataFrame(scaled_data)
scaled_df.head()

# Apply KMeans with different numbers of clusters to find the elbow point
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(scaled_df)
    wcss.append(kmeans.inertia_)

# Plot the elbow graph
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Try Calinski-Harabasz Index since the elbow plot is ambiguous
from sklearn.metrics import calinski_harabasz_score

for n_clusters in range(2, 11):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    labels = kmeans.fit_predict(scaled_df)
    score = calinski_harabasz_score(scaled_df, labels)
    print(f"For n_clusters = {n_clusters}, the Calinski-Harabasz score is {score}")

# The optimal number is 4 clusters
kmeans = KMeans(n_clusters=4, init='k-means++', max_iter=300, n_init=10, random_state=42)

# Fit the model
kmeans.fit(scaled_df)

# Add cluster labels to the original data
data2['Cluster'] = kmeans.labels_

# Plot clusters with spending score and annual income
plt.figure(figsize=(8,6))
sns.scatterplot(x='Annual Income', y='Spending Score', hue='Cluster', data=data2, palette='Set1')
plt.title('Customer Segments')
plt.show()

cluster_analysis = data2.groupby('Cluster').mean()
print(cluster_analysis)

cluster_counts = data2['Cluster'].value_counts()
print(cluster_counts)

data2.to_csv('customers.csv', index=False)